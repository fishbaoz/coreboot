/**
 * @file
 *
 * ALIB ASL library
 *
 *
 *
 * @xrefitem bom "File Content Label" "Release Content"
 * @e project:     AGESA
 * @e sub-project: GNB
 * @e \$Revision: 311402 $   @e \$Date: 2015-01-21 13:53:51 +0800 (Wed, 21 Jan 2015) $
 *
 */
/*
*****************************************************************************
*
* Copyright 2008 - 2015 ADVANCED MICRO DEVICES, INC.  All Rights Reserved.
*
* AMD is granting you permission to use this software (the Materials)
* pursuant to the terms and conditions of your Software License Agreement
* with AMD.  This header does *NOT* give you permission to use the Materials
* or any rights under AMD's intellectual property.  Your use of any portion
* of these Materials shall constitute your acceptance of those terms and
* conditions.  If you do not agree to the terms and conditions of the Software
* License Agreement, please do not use any portion of these Materials.
*
* CONFIDENTIALITY:  The Materials and all other information, identified as
* confidential and provided to you by AMD shall be kept confidential in
* accordance with the terms and conditions of the Software License Agreement.
*
* LIMITATION OF LIABILITY: THE MATERIALS AND ANY OTHER RELATED INFORMATION
* PROVIDED TO YOU BY AMD ARE PROVIDED "AS IS" WITHOUT ANY EXPRESS OR IMPLIED
* WARRANTY OF ANY KIND, INCLUDING BUT NOT LIMITED TO WARRANTIES OF
* MERCHANTABILITY, NONINFRINGEMENT, TITLE, FITNESS FOR ANY PARTICULAR PURPOSE,
* OR WARRANTIES ARISING FROM CONDUCT, COURSE OF DEALING, OR USAGE OF TRADE.
* IN NO EVENT SHALL AMD OR ITS LICENSORS BE LIABLE FOR ANY DAMAGES WHATSOEVER
* (INCLUDING, WITHOUT LIMITATION, DAMAGES FOR LOSS OF PROFITS, BUSINESS
* INTERRUPTION, OR LOSS OF INFORMATION) ARISING OUT OF AMD'S NEGLIGENCE,
* GROSS NEGLIGENCE, THE USE OF OR INABILITY TO USE THE MATERIALS OR ANY OTHER
* RELATED INFORMATION PROVIDED TO YOU BY AMD, EVEN IF AMD HAS BEEN ADVISED OF
* THE POSSIBILITY OF SUCH DAMAGES.  BECAUSE SOME JURISDICTIONS PROHIBIT THE
* EXCLUSION OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES,
* THE ABOVE LIMITATION MAY NOT APPLY TO YOU.
*
* AMD does not assume any responsibility for any errors which may appear in
* the Materials or any other related information provided to you by AMD, or
* result from use of the Materials or any related information.
*
* You agree that you will not reverse engineer or decompile the Materials.
*
* NO SUPPORT OBLIGATION: AMD is not obligated to furnish, support, or make any
* further information, software, technical information, know-how, or show-how
* available to you.  Additionally, AMD retains the right to modify the
* Materials at any time, without notice, and is not obligated to provide such
* modified Materials to you.
*
* U.S. GOVERNMENT RESTRICTED RIGHTS: The Materials are provided with
* "RESTRICTED RIGHTS." Use, duplication, or disclosure by the Government is
* subject to the restrictions as set forth in FAR 52.227-14 and
* DFAR252.227-7013, et seq., or its successor.  Use of the Materials by the
* Government constitutes acknowledgement of AMD's proprietary rights in them.
*
* EXPORT ASSURANCE:  You agree and certify that neither the Materials, nor any
* direct product thereof will be exported directly or indirectly, into any
* country prohibited by the United States Export Administration Act and the
* regulations thereunder, without the required authorization from the U.S.
* government nor will be used for any purpose prohibited by the same.
* ***************************************************************************
*
*/

  /*----------------------------------------------------------------------------------------*/
  /**
   *  SMU Service request
   *
   *  Arg0 - Smu service ID
   *  Arg1 - Smu service parameters
   *
   */
  Method (procGnbSmuServiceReq, 2, Serialized) {
    ALIB_DEBUG (" GnbSmuServiceReq Enter")

    // Define Arg1 for function 0
    CreateDWordField(Arg1,  0, varSmuParam0)           // SMU service Request Argument 0
    CreateDWordField(Arg1,  4, varSmuParam1)           // SMU service Request Argument 1
    CreateDWordField(Arg1,  8, varSmuParam2)           // SMU service Request Argument 2
    CreateDWordField(Arg1, 12, varSmuParam3)           // SMU service Request Argument 3
    CreateDWordField(Arg1, 16, varSmuParam4)           // SMU service Request Argument 4
    CreateDWordField(Arg1, 20, varSmuParam5)           // SMU service Request Argument 5

    ALIB_DEBUG (Concatenate ("  Smu service id = ", ToHexString (Arg0), ADBG))
    ALIB_DEBUG (Concatenate ("  Smu service argument0 = ", ToHexString (varSmuParam0), ADBG))
    ALIB_DEBUG (Concatenate ("  Smu service argument1 = ", ToHexString (varSmuParam1), ADBG))
    ALIB_DEBUG (Concatenate ("  Smu service argument2 = ", ToHexString (varSmuParam2), ADBG))
    ALIB_DEBUG (Concatenate ("  Smu service argument3 = ", ToHexString (varSmuParam3), ADBG))
    ALIB_DEBUG (Concatenate ("  Smu service argument4 = ", ToHexString (varSmuParam4), ADBG))
    ALIB_DEBUG (Concatenate ("  Smu service argument5 = ", ToHexString (varSmuParam5), ADBG))

    // 1 Clear Response
    ALIB_DEBUG ("--Clear Response--")
    Store (0, bfSmuMessageResponse)
    
    while (LNotEqual (bfSmuMessageResponse, 0)) {
    }

    // 2 Write message arguments
    Store (varSmuParam0, bfSmuMessageArgument0)
    Store (varSmuParam1, bfSmuMessageArgument1)
    Store (varSmuParam2, bfSmuMessageArgument2)
    Store (varSmuParam3, bfSmuMessageArgument3)
    Store (varSmuParam4, bfSmuMessageArgument4)
    Store (varSmuParam5, bfSmuMessageArgument5)

    // 3 Write message ID
    Store (Arg0, bfSmuMessageId)

    // 4 Poll Response until non-zero
    while (LEqual (bfSmuMessageResponse, 0)) {
        ALIB_DEBUG ("--Poll Response until non-zero--")
    }

    // 5 Read updated SMU message arguments if necessary

    ALIB_DEBUG ("GnbSmuServiceReq Exit")
  }

  /*----------------------------------------------------------------------------------------*/
  /**
   *  SB port visability control
   *
   *  Arg0 - Smu service ID
   *
   */
  Method (procGnbSbPort, 1) {

  }

  /*----------------------------------------------------------------------------------------*/
  /**
   *  Manage Mem PS
   *
   *  
   *  Arg0 - ON/OFF
   *
   */    
   Method (procMemePSManage, 1) {
    Store (bfSwNbPstateLoDis, Local0)
//    if (LEqual (Arg0, OFF)) {
//      Store (0x1, bfSwNbPstateLoDis)
//      ALIB_DEBUG (" Mem PS OFF!!!")
//    } else {
//      Store (0x0, bfSwNbPstateLoDis)
//      ALIB_DEBUG (" Mem PS ON!!!")
//    } 
     return (Local0)
   }

  Name (varBapmManageStatus, OFF)
  Name (varEnableBapm, 0)

  /*----------------------------------------------------------------------------------------*/
  /**
   *  Manage BAPM
   *
   *
   *  Arg0 - ON/OFF (ON means restore original state)
   */
    Method (procBapmManage, 1) {
      if (LEqual (Arg0, OFF)) {
      // Arg0 is "OFF" so STORE BAPM STATE (first time only) and DISABLE BAPM
        if (LEqual (varBapmManageStatus, OFF)) {
          Store (ON, varBapmManageStatus)
//          Store (bfBapmOn, varEnableBapm)
        }
        ALIB_DEBUG (" Disable BAPM")
//        procGnbSmuServiceReq (0x60, 0x0801)
//        while (LNotEqual (bfSmuCfgLock, 0)) {
//          procGnbSmuServiceReq (0x60, 0x0801)
//        }
      } else {
      // Arg0 is "ON" so RESTORE BAPM STATE
        if (LEqual (varBapmManageStatus, ON)) {
          if (LEqual (varEnableBapm, 1)) {
          // Original BAPM state was ON, so turn it back on
              ALIB_DEBUG (" Enable BAPM")
//              procGnbSmuServiceReq (0x5F, 1)
          }
        }
      }
    }

